{"version":3,"sources":["modules/dimensions.js"],"names":["angular","value","element","currentStyle","nodeName","window","getComputedStyle","name","prop","fn","css","extra","boxRect","getBoundingClientRect","style","height","offsetHeight","offset","left","docElement","ownerDocument","width","curPosition","curLeft","curCSSTop","position","pageYOffset","documentElement","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","curCSSLeft","options","i","calculatePosition","curTop","curOffset","indexOf","curElem","props","parseFloat","isFunction","call","top","using","offsetParentRect","offsetParentElement","offsetParent","offsetWidth","outer"],"mappings":"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","file":"modules/dimensions.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n  \n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = fn.css(element, 'position'),\n          curElem = angular.element(element),\n          props = {};\n      \n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n      \n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n      \n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      \n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n      \n      if (options.top !== null ) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if ( options.left !== null ) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n"],"sourceRoot":"/source/"}