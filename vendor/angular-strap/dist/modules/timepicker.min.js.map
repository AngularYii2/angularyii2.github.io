{"version":3,"sources":["modules/timepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","bodyEl","isNative","isTouch","timepickerFactory","$get","parentScope","config","scope","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","element","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","$timepicker","init","$tooltip","extend","floorMinutes","time","options","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","controller","$dateValue","hoursFormat","$dateFormatter","$iconUp","$iconDown","$select","$moveIndex","value","index","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","minute","$setViewValue","$timeout","keep","hide","Date","setHours","setMinutes","setSeconds","copy","$render","hours","midIndex","push","label","selected","$isSelected","disabled","i","minutes","seconds","minutesFormat","rows","showSeconds","secondsFormat","$isDisabled","showAM","timeSeparator","$date","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","hoursLength","parseInt","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","$onKeyDown","test","keyCode","secondsLength","sepLength","lateralMove","count","minutesLength","selectRange","incr","isSeconds","isMeridian","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","blur","$element","directive","$options","$scope","restrict","forEach","require","link","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","falseValueRegExp","isDefined","bsShow","newValue","oldValue","timepicker","key","dateParser","$dateParser","$observe","validateAgainstMinMaxTime","$watch","ngModel","getTimeForAttribute","parse","timezoneOffsetAdjust","$formatters","modelValue","NaN","$on"],"mappings":"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","file":"modules/timepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      template: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time)\n        {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\n            $timepicker.$build();\n          } else if(!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if(!angular.isDate(date)) date = new Date(date);\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if(index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if(options.autoclose && !keep) {\n            $timeout(function() { $timepicker.hide(true); });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [], hour;\n          for(i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\n          }\n          var minutes = [], minute;\n          for(i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\n          }\n          var seconds = [], second;\n          for(i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({date: second, label: formatDate(second, secondsFormat), selected: $timepicker.$date && $timepicker.$isSelected(second, 2), disabled: $timepicker.$isDisabled(second, 2)});\n          }\n\n          var rows = [];\n          for(i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if(!$timepicker.$date) return false;\n          else if(index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if(index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if(index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if(index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if(index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if(index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value,index);\n          } else {\n            $timepicker.$moveIndex(value,index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          }\n          else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          }\n          else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if(index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {hour: targetDate.getHours()});\n          } else if(index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\n          } else if(index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {second: targetDate.getSeconds()});\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if(evt.keyCode === 13) return $timepicker.hide(true);\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if(selectedIndex === 0) {\n            newDate.setHours(hours + incr*parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if(selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr*parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if(isSeconds) {\n            newDate.setSeconds(seconds + incr*parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if(isMeridian) {\n            if(!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength)*showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if(element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if(element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if(angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if(options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if(!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if(options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!timepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(!isValid) {\n              return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if(options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.timeType === 'number') {\n            return date.getTime();\n          } else if(options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if(options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}